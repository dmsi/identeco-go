package keys

import (
	"crypto/rsa"
	"math/big"
	"testing"

	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
)

func TestPublicKeyToJWK(t *testing.T) {
	n, _ := new(big.Int).SetString("22859957414005176933088155006738159631359816837713682164753679698155027881325336925701720664168961420409813264777727425705483375536780212594579859344454469768656556369564897853174219190729696666892707301251899031405030232841427949830823240625867082253375015816320236810880430884233775115451536780897199953687111854502768591315708002017275185920218873122412578582591632489573424340032639986247360980872910178940647383668826353871589174008941315839247724864861590899991557747158336927445362565535300786851524506634831164861274000563911823750147057460872635513778418314466126235693691673444537099399333417908589052559987", 10)
	pub := rsa.PublicKey{
		E: 65537,
		N: n,
	}

	jwk, err := publicKeyToJWK(pub)
	require.ErrorIs(t, err, nil)
	assert.Equal(t, "AQAB", jwk.E)
	assert.Equal(t, "tRXzVqY51HMCh-iK2K0YmGF044P2qM_42MDBZuk6CpqUg1Vm7ylBHLm41QWNIwvzyVtBiibjSPtT_Ua2-_6v5dz2bwZqUzxYU_yq5sacv3yfOpwe8mYej2wyaC0fBcKSigrpFj3nDHTXEUGIiR0Vptd7ja7vjOcj_8raGjaR7zGF_5P42OA-UUDmRmyU1PG_d4fV-bagip1byEcPM4GSxqOnWkJdNX9da82S9QxYSofFq9t8MYH2texM5ImcqZ0FmdUXb8k1DeBXv0dqg1ZbhaDvCzNWfgoMjhPeB5lpnCP0gR-X_3dLJDPI1lU0ddnjepCWuh48WuImxfilaoQCcw", jwk.N)
	assert.Equal(t, "RSA", jwk.Kty)
	assert.Equal(t, "RS256", jwk.Alg)
	assert.Equal(t, "sig", jwk.Use)
}

func TestJWKToPublicKey(t *testing.T) {
	jwk := JWK{
		E: "AQAB",
		N: "tRXzVqY51HMCh-iK2K0YmGF044P2qM_42MDBZuk6CpqUg1Vm7ylBHLm41QWNIwvzyVtBiibjSPtT_Ua2-_6v5dz2bwZqUzxYU_yq5sacv3yfOpwe8mYej2wyaC0fBcKSigrpFj3nDHTXEUGIiR0Vptd7ja7vjOcj_8raGjaR7zGF_5P42OA-UUDmRmyU1PG_d4fV-bagip1byEcPM4GSxqOnWkJdNX9da82S9QxYSofFq9t8MYH2texM5ImcqZ0FmdUXb8k1DeBXv0dqg1ZbhaDvCzNWfgoMjhPeB5lpnCP0gR-X_3dLJDPI1lU0ddnjepCWuh48WuImxfilaoQCcw",
	}

	expectedModulus, _ := new(big.Int).SetString("22859957414005176933088155006738159631359816837713682164753679698155027881325336925701720664168961420409813264777727425705483375536780212594579859344454469768656556369564897853174219190729696666892707301251899031405030232841427949830823240625867082253375015816320236810880430884233775115451536780897199953687111854502768591315708002017275185920218873122412578582591632489573424340032639986247360980872910178940647383668826353871589174008941315839247724864861590899991557747158336927445362565535300786851524506634831164861274000563911823750147057460872635513778418314466126235693691673444537099399333417908589052559987", 10)

	pub, err := jwkToPublicKey(jwk)
	require.ErrorIs(t, err, nil)
	assert.Equal(t, 65537, pub.E)
	assert.Equal(t, expectedModulus, pub.N)
}

func TestEncodeExponent(t *testing.T) {
	s, err := encodeExponent(65537)
	require.ErrorIs(t, err, nil)
	assert.Equal(t, "AQAB", s)
}

func TestEncodeModulus(t *testing.T) {
	n, _ := new(big.Int).SetString("65537", 10)
	s, err := encodeModulus(*n)
	require.ErrorIs(t, err, nil)
	assert.Equal(t, "AQAB", s)
}
