plugins:
  - serverless-iam-roles-per-function

service: identeco-go

frameworkVersion: '3'

provider:
  name: aws
  region: eu-west-1
  runtime: provided.al2
  architecture: arm64
  environment:
    IDO_DEPLOYMENT_STAGE: ${sls:stage}
    IDO_PRIVATE_KEY_LENGTH: 2048
    IDO_PRIVATE_KEY_LIFETIME: '30 days'
    IDO_ACCESS_TOKEN_LIFETIME: '60m'
    IDO_REFRESH_TOKEN_LIFETIME: '720h'
    IDO_CLAIM_ISS: https://github.com/dmsi/identeco
    IDO_STORAGE_DRIVER_USERS: dynamodb
    IDO_STORAGE_DRIVER_KEYS: s3
    IDO_STORAGE_DRIVER_USERS_DDB_TABLE_NAME: ${self:service}-${sls:stage}-users
    IDO_STORAGE_DRIVER_KEYS_S3_BUCKET_NAME: ${self:service}-${sls:stage}-keys
    IDO_STORAGE_DRIVER_KEYS_S3_PRIVATE_KEY_NAME: keypair.pem
    IDO_STORAGE_DRIVER_KEYS_S3_JWKS_NAME: jwks.json

package:
  individually: true
  patterns:
    - '!./**'

custom:
  usersTableArn:
    Fn::GetAtt: [usersTable, Arn]
  privateKeyObjectArn:
    Fn::Join:
      - '/'
      - - Fn::GetAtt: [keysBucket, Arn]
        - ${self:provider.environment.IDO_STORAGE_DRIVER_KEYS_S3_PRIVATE_KEY_NAME}
  jwksObjectArn:
    Fn::Join:
      - '/'
      - - Fn::GetAtt: [keysBucket, Arn]
        - ${self:provider.environment.IDO_STORAGE_DRIVER_KEYS_S3_JWKS_NAME}

functions:
  jwksets:
    handler: bootstrap
    events:
      - http:
          method: get
          path: '.well-known/jwks.json'
    iamRoleStatements:
      - Effect: Allow
        Action:
          - s3:GetObject
        Resource:
          - ${self:custom.privateKeyObjectArn}
          - ${self:custom.jwksObjectArn}
    package:
      artifact: ../../bin/jwksets.zip

  register:
    handler: bootstrap
    events:
      - http:
          method: post
          path: register
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:PutItem
        Resource: ${self:custom.usersTableArn}
      - Effect: Allow
        Action:
          - s3:GetObject
        Resource:
          - ${self:custom.privateKeyObjectArn}
          - ${self:custom.jwksObjectArn}
    package:
      artifact: ../../bin/register.zip

  login:
    handler: bootstrap
    events:
      - http:
          method: post
          path: login
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:GetItem
        Resource: ${self:custom.usersTableArn}
      - Effect: Allow
        Action:
          - s3:GetObject
        Resource:
          - ${self:custom.privateKeyObjectArn}
          - ${self:custom.jwksObjectArn}
    package:
      artifact: ../../bin/login.zip

  refresh:
    handler: bootstrap
    events:
      - http:
          method: get
          path: refresh
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:GetItem
        Resource: ${self:custom.usersTableArn}
      - Effect: Allow
        Action:
          - s3:GetObject
        Resource:
          - ${self:custom.privateKeyObjectArn}
          - ${self:custom.jwksObjectArn}
    package:
      artifact: ../../bin/refresh.zip

  rotatekeys:
    handler: bootstrap
    events:
      - schedule: rate(${self:provider.environment.IDO_PRIVATE_KEY_LIFETIME})
    iamRoleStatements:
      - Effect: Allow
        Action:
          - s3:GetObject
          - s3:PutObject
        Resource:
          - ${self:custom.privateKeyObjectArn}
          - ${self:custom.jwksObjectArn}
    package:
      artifact: ../../bin/rotatekeys.zip

  ping:
    handler: bootstrap
    events:
      - http:
          method: get
          path: ping/{id}
    package:
      artifact: ../../bin/ping.zip

resources:
  Resources:
    usersTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:provider.environment.IDO_STORAGE_DRIVER_USERS_DDB_TABLE_NAME}
        AttributeDefinitions:
          - AttributeName: username
            AttributeType: S
        KeySchema:
          - AttributeName: username
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
    keysBucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: ${self:provider.environment.IDO_STORAGE_DRIVER_KEYS_S3_BUCKET_NAME}
        AccessControl: Private
